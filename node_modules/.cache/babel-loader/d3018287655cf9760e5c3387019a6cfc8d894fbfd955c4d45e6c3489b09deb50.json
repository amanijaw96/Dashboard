{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\n// import createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\n// import sagas from \"./sagas\";\n\n// const sagaMiddleware = createSagaMiddleware();\n\n// const middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n  const store = createStore(reducers, initialState\n  // compose(applyMiddleware(...middlewares))\n  );\n\n  // sagaMiddleware.run(sagas);\n\n  if (module.hot) {\n    module.hot.accept(\"./reducers\", () => {\n      const nextRootReducer = require(\"./reducers\");\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n  return store;\n}","map":{"version":3,"names":["createStore","applyMiddleware","compose","reducers","configureStore","initialState","store","module","hot","accept","nextRootReducer","require","replaceReducer"],"sources":["/home/user/Desktop/dashboard/src/redux/store.js"],"sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\n// import createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\n// import sagas from \"./sagas\";\n\n// const sagaMiddleware = createSagaMiddleware();\n\n// const middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n\tconst store = createStore(\n\t\treducers,\n\t\tinitialState\n\t\t// compose(applyMiddleware(...middlewares))\n\t);\n\n\t// sagaMiddleware.run(sagas);\n\n\tif (module.hot) {\n\t\tmodule.hot.accept(\"./reducers\", () => {\n\t\t\tconst nextRootReducer = require(\"./reducers\");\n\t\t\tstore.replaceReducer(nextRootReducer);\n\t\t});\n\t}\n\n\treturn store;\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,EAAEC,OAAO,QAAQ,OAAO;AAC7D;AACA,OAAOC,QAAQ,MAAM,YAAY;AACjC;;AAEA;;AAEA;;AAEA,OAAO,SAASC,cAAcA,CAACC,YAAY,EAAE;EAC5C,MAAMC,KAAK,GAAGN,WAAW,CACxBG,QAAQ,EACRE;EACA;EACD,CAAC;;EAED;;EAEA,IAAIE,MAAM,CAACC,GAAG,EAAE;IACfD,MAAM,CAACC,GAAG,CAACC,MAAM,CAAC,YAAY,EAAE,MAAM;MACrC,MAAMC,eAAe,GAAGC,OAAO,CAAC,YAAY,CAAC;MAC7CL,KAAK,CAACM,cAAc,CAACF,eAAe,CAAC;IACtC,CAAC,CAAC;EACH;EAEA,OAAOJ,KAAK;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}